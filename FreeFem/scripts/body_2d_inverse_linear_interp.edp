// Matteo Limberto
// 14-9-15
//
// Test 5 : we try to implement a gradient method 
//
// varf are used to build the matrices and vectors
//
// The zero mean condition is enforced using a Lagrange multiplier
// Stability issues need to be investigated (inf-sup condition)
//
// We use two different meshes, one for the heart only, the other for both
// heart and torso

// load "iovtk"
// load "Element_P3"


////////////////////////////////////////
//////////     PARAMETERS     //////////
////////////////////////////////////////

// Include mesh and geometrical/physiological parameters
include "body_parameters_interp.edp"

include "numerical_parameters.edp"

////////////////////////////////////////
//////      		MESH  		  //////
////////////////////////////////////////

if(plotData){
	plot(Th,wait=1,cmm="Compound mesh");
	plot(Tin,wait=1,cmm="Heart mesh");
}

////////////////////////////////////////
//////     FUNCTIONAL SETTING     //////
////////////////////////////////////////


// Build extension and restriction matrix
matrix IM = interpolate(V2h,V2in,inside=1); // extension to 0 in the torso
matrix RM = interpolate(V2in,V2h);


////////////////////////////////////////
//////      REGION FUNCTION      ///////
////////////////////////////////////////

// Region function is needed to define piece-wise constant coefficients

// Patch the region function to account for the internal boundary
V2h reg = region ;
	 // plot(reg, fill = 1 , wait = 1, value = 1);

int regH = reg(0,0); cout << "regH : " << regH << endl;
int regT = reg(0,heartR*1.01); cout << "regT : " << regT << endl;

varf bd(u,v) = int2d(Th)(u*v) + on(dH , u = 1.) ;
real[int] Bd = bd(0,V2h) ;
reg[] = Bd ? regH : reg[] ;


////////////////////////////////////////
///     SOLVE FOR TARGET SOLUTION    ///
////////////////////////////////////////

cout << "Solving the forward problem for a known ischemia" << endl;

// Set the initial ischemia 
// we do it through a level-set function (possibly a signed distance function)

// V2in LS = -1. ; // all ischemia
// V2in LS = 1. ; // no ischemia
V2in LS = x ; 
// V2in LS = sqrt((x - ischX)*(x - ischX)+(y - ischY)*(y - ischY) ) - ischR ;

V2in ischRegion = (LS(x,y) <= 0) ;

// Compute the transmembrane potential (source term)
V2in G = (LS > tau) + 0.5 *(1 + LS/tau + sin(pi*LS/tau)/pi)*(abs(LS) < tau);

V2in vtrans = ischVtrans*(1-G) + healthyVtrans*G ;

if(plotData){
	plot(ischRegion,wait=1,nbiso=4,value = 1,fill=1, cmm = "Infarcted region location");
	// V2h targetW =  1. - G ;
	// plot(targetW,wait=1,value = 1,fill=1, cmm = "Smoothed region function");
	// V2h gvtrans = sqrt( dx(vtrans)*dx(vtrans) + dy(vtrans)*dy(vtrans)) ;
	// plot(gvtrans,wait=1,value = 1,fill=1, cmm = "Gradient of the transmembrane potential");
}


// Compute the coefficients

V2h Mlhs = (Mi + Me )*G*(reg == regH) + (tMi + tMe )*(1-G)*(reg == regH) + M0*(reg == regT) ;
V2in Mrhs = Mi*G + tMi*(1-G) ;

V2h Mrhsbar;
Mrhsbar[] = IM * Mrhs[] ; // extend rhs to the torso (with zero extension)

// if(plotData){
	// plot(Mlhs, fill = 1 , wait = 1, value = 1 , nbiso = 20, cmm = "M lhs", dim = 2 );
	// plot(Mrhs, fill = 1 , wait = 1, value = 1 , nbiso = 20, cmm = "M rhs", dim = 2 );
	// plot(Mrhsbar, fill = 1 , wait = 1, value = 1 , nbiso = 20, cmm = "M rhs bar", dim = 2 );
// }

// Linear and bilinear forms
varf a(uh,tuh) = int2d(Th)(Mlhs*(dx(uh)*dx(tuh) + dy(uh)*dy(tuh))) ;
varf b(uh,tuh) = - int2d(Th)(Mrhsbar*( dx(tuh)*dx(vtrans) + dy(tuh)*dy(vtrans) ) ) ; // MAGARI CAMBIA QUESTA E USA INTERPOLATION MATRIX
varf c(uh,tuh) = int2d(Th)(tuh) ; // use to enforce the zero-mean condition with a Lagrange multiplier

// Build the matrices and solve the problem
matrix A = a(V2h,V2h) ;
real[int] C = c(0,V2h) ;

real[int] B = b(0,V2h) ;
real[int] rhs = [B,0];

matrix TOTAL = [ [ A ,  C ] ,
				 [ C' , 0 ] ];

set(TOTAL, solver = UMFPACK) ;

real[int] sol(V2h.ndof + 1);
sol= TOTAL^-1*rhs ; 

V2h zd;
zd[] = sol(0 : V2h.ndof);

if(plotData)
	plot(zd,wait=1,fill=1,nbiso = 20,dim=2 , cmm = "Target solution");

cout << "Lagrange multiplier : " << sol[V2h.ndof] << endl;
cout << "Mean value of solution zd : " << int2d(Th)(zd) / int2d(Th)(1.0) << endl;


////////////////////////////////////////
///     SOLVE THE INVERSE PROBLEM    ///
////////////////////////////////////////

cout << "Setting up the inverse problem ..." << endl;

// Define an initial guess for the control function

// V2in w = 1-G ; // this w corresponds to the target solution 
// real gamma = 3.5;
// V2in w = 1.*exp(-gamma * ((x)*(x) + (y-0.1)*(y-0.1) ) ) ; // the control function is defined only inside the heart region
// V2in w = (1. - G(x+ 0.6 , y)) ; // less ischemia
// V2in w = (1. - G(x - 0.6 , y)) ; // more ischemia
V2in w = 0.0 ; // no ischemia
// V2in w = 1.0 ; // all ischemia

// Define extension to the torso 
V2h wbar;
wbar[] = IM * w[] ;

if(plotData){
	plot(w,wait=1 , cmm = "control function w" , fill =1 ,nbiso = 30 );
	// plot(wbar,wait=1 , cmm = "Extended control function w" , fill =1 ,nbiso = 30 );
	
	// V2in gw = sqrt( dx(w)*dx(w) + dy(w)*dy(w)) ;
	// V2h gwbar = sqrt( dx(wbar)*dx(wbar) + dy(wbar)*dy(wbar)) ;

	// plot(gw,wait =1 , cmm = "gradient of the control function w" , fill =1 ,nbiso = 30 );
	// plot(gwbar,wait =1 , cmm = "gradient of the extended control function w" , fill =1 ,nbiso = 30 );
}

// Initialize vectors for state and adjoint problem

real[int] Bst(V2h.ndof)  ; // initialize rhs
real[int] solState(V2h.ndof + 1); // initialize solution  

real[int] Badj(V2h.ndof) ; // initialize rhs
real[int] solAdj(V2h.ndof + 1); // initialize solution


// ITERATIVE LOOP

real[int] Js(Nmax);
real[int] trueJs(Nmax);

V2h uh,ph ;
V2h stateLHS , stateRHS ;
V2in gradw;

for (int i=0 ; i<Nmax ; ++i)
{
	// Build coefficients for the state problem
	// V2h stateLHS =( (Mi + Me) + (tMi + tMe - Mi - Me)*wbar )*(reg == regH) + M0*(reg == regT) ; // this should generally be a tensor
	V2h stateLHS =( Mi + Me )*(reg == regH) + M0*(reg == regT) ; // this should generally be a tensor
	V2h stateRHS = -1. * (ischVtrans - healthyVtrans )*Mi ; 

	// Build the matrix for the state problem
	varf astate(uh,tuh) = int2d(Th)(stateLHS*( dx(uh)*dx(tuh) + dy(uh)*dy(tuh) ) ) ;
	varf bstate(uh,tuh) = int2d(Th,regH)(stateRHS*( dx(uh)*dx(tuh) + dy(uh)*dy(tuh) ) ) ;

	matrix Astate = astate(V2h,V2h) ;
	matrix Bstate = bstate(V2in,V2h) ;
	real[int] Cstate = c(0,V2h) ;

	matrix TOTALstate = [ [ Astate  ,  Cstate ] ,
				 	  	  [ Cstate' ,  0      ] ];

	set(TOTALstate, solver = UMFPACK) ;
	
	// Build rhs for the state system
	Bst.resize(V2h.ndof) ;
	Bst = Bstate * w[]	;
	Bst.resize(V2h.ndof + 1); // to account for zero-mean condition

	// Solve the state problem
	cout << "Solving the state problem ..." << endl;
	solState = TOTALstate^-1*Bst ;
	uh[] = solState(0 : V2h.ndof ) ;

	// real[int] viso = [-10.,-9.,-8.,-7.,-6.,-5.,-4.,-3.,-2.,-1.,0.,1.,2.,3.,4.,5.,6.,7.,8.,9.,10.] ;
	// if(plotData){
		// plot(uh,wait=1,fill=1,dim=2 , cmm = "Solution for the state problem");
	// }

	cout << "Lagrange multiplier : " << solState(V2h.ndof) << endl;
	cout << "Mean value of solution u : " << int2d(Th)(uh) / int2d(Th)(1.0) << endl;


	// Build the matrix for the adjoint problem
	varf aadj(uh,tuh) = int2d(Th)(stateLHS*( dx(uh)*dx(tuh) + dy(uh)*dy(tuh) ) ) ;
	varf badj(uh,tuh) = int1d(Th,dT)(-1.*(uh)*tuh) ; 

	matrix Aadj = aadj(V2h,V2h) ;
	matrix Badjoint = badj(V2h,V2h) ;
	real[int] Cadj = c(0,V2h) ;

	matrix TOTALadj = [ [ Aadj  ,  Cadj ] ,
			 	    	[ Cadj' ,  0    ] ];

	set(TOTALadj, solver = UMFPACK) ;

	// Build rhs for the adjoint problem
	Badj.resize(V2h.ndof) ;
	V2h temp = uh - zd ;
	Badj = Badjoint * ( temp[] ) ;
	Badj.resize(V2h.ndof + 1);

	// Solve the adjoint problem
	cout << "Solving the adjoint problem ..." << endl;
	solAdj = TOTALadj^-1*Badj ;
	ph[] = solAdj(0 : V2h.ndof ) ;

	// if(plotData){
		// plot(ph,wait=1,fill=1,nbiso = 40,dim=2 , cmm = "Solution for the adjoint problem");
	// }
	
	// Compute gradient of w

	V2in uhr , phr ; 
	uhr[] = RM * uh[] ; 
	phr[] = RM * ph[] ;

	varf agrad(u,v) = int2d(Tin)(u*v) + int2d(Tin)( dx(u)*dx(v) + dy(u)*dy(v) ) ;

	varf bgrad(gw,tgw) = // int2d(Th,regH)(beta*( dx(w)*dx(tgw) + dy(w)*dy(tgw) ) )
				   // + int2d(Th,regH)(beta*( w*tgw ) )
				   int2d(Tin)( (tMi + tMe - Mi - Me )*tgw*( dx(uhr)*dx(phr) + dy(uhr)*dy(phr) ) )
				   + int2d(Tin)( (ischVtrans - healthyVtrans )*tMi*( dx(tgw)*dx(phr) + dy(tgw)*dy(phr) ) )
				   ;

	matrix Agrad = agrad(V2in,V2in, solver = UMFPACK) ;
	real[int] Bgrad = bgrad(0,V2in) ;

	cout << "Computing the gradient of w ..." << endl;
	gradw[] = Agrad^-1 * Bgrad ;

	gradw = beta*w + gradw ; // aggiungi parte dovuta alla penalizzazione

	// plot(gradw,wait=1,fill=1,nbiso = 20,dim=2 , cmm = "Gradient of w");	

	// Evaluate objective function

	Js[i] = int1d(Th,dT)( (uh - zd)*(uh - zd) ) 
		+ int2d(Tin)( beta*(dx(w)*dx(w) + dy(w)*dy(w)) )
		+ int2d(Tin,regH)(beta*w*w) ;

	trueJs[i] = int1d(Th,dT)( (uh - zd)*(uh - zd) ) ;

	cout << "Iteration " << i << ": Objective = " << Js[i] << endl;
	cout << "Iteration " << i << ": True Objective = " << trueJs[i] << endl;

	// Update w 

	w = w - gradw*gstep ;

	// plot(w,wait=1,fill=1,nbiso = 20,dim=2 , cmm = "new w");	

	// Projection (to keep the control bounded between 0 and 1)
	for (int j=0 ; j < V2in.ndof ; ++j) 
	{
		w[](j) = ( w[](j) >= 1.0 ) ? 1.0 : w[](j) ;  
		w[](j) = ( w[](j) <= 0.0 ) ? 0.0 : w[](j) ;  
	}

	// V2in error = abs(w - ischRegion) ;

	// plot(error,wait=0,fill=1,nbiso = 20,dim=3 , cmm = "Error");	

	if(plotData){
		// real[int] viso = 0.0:0.1:1.0 ; viso = [-0.05 , viso , 1.05 ];
		// plot(w,wait=0,viso = viso,fill=1,nbiso = 20,dim=2 ,value=1, cmm = "new w after projection");	
		plot(w,wait=0,fill=1,nbiso = 20,dim=2 ,value=1, cmm = "new w after projection");	
	}
	// V2h errorState = abs(uh - zd) ;
	// plot(errorState , fill=1 , dim = 2 , cmm = "uh - zd") ;

}

// Export in VTK format
// savevtk("export/inverseECG.vtk",Th,G,w,zd,uh,ph) ;

// Export objective function evaluations
{
	cout << "Exporting objective function ..." << endl;
	ofstream f("../export/J.txt");
	ofstream g("../export/tJ.txt");
	for (int j=0;j<Nmax;++j){
		f << j << " " << Js[j] << endl;
		g << j << " " << trueJs[j] << endl;
	}
}












